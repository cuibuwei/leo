namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [
    { initial_symbol_table = "16e119df6ee0ccf0c2a2eaa55c81867664630b3468627f778098d1ff0c8cd5fa", type_checked_symbol_table = "f4fb482aeb7abb52f5ca3aae4f42a53b98f7403ec1d2c488996efb1ff11f213b", unrolled_symbol_table = "f4fb482aeb7abb52f5ca3aae4f42a53b98f7403ec1d2c488996efb1ff11f213b", initial_ast = "5a07ca97b09d15a8549692408a74444dc346fbd3c8d08b1e3fa4dc60d2a0a05c", unrolled_ast = "5a07ca97b09d15a8549692408a74444dc346fbd3c8d08b1e3fa4dc60d2a0a05c", ssa_ast = "50c140777b792e917824e9021e722774b3e037f2d97c9d0c59a14b2c5088c98b", flattened_ast = "f6f59f2f6e0f8b8c933ecdb0d2360cd9c53a2ba10486c2935f72140b48b68927", destructured_ast = "f5851f2b9ebf08030bf8a9778e0c52c85f61b0a32f3eed802897da99c48a29bd", inlined_ast = "8051736585fdd624f74052e44368eef86e1a7e9533152406503a5737939c4e1e", dce_ast = "8051736585fdd624f74052e44368eef86e1a7e9533152406503a5737939c4e1e", bytecode = """
program test.aleo;

mapping foo:
    key as u32.public;
    value as u32.public;

function main_inner:
    input r0 as u32.public;
    input r1 as u32.public;
    async main_inner r0 r1 into r2;
    output r2 as test.aleo/main_inner.future;

finalize main_inner:
    input r0 as u32.public;
    input r1 as u32.public;
    set r1 into foo[r0];

function baz:
    input r0 as u32.private;
    input r1 as u32.private;
    add r0 r1 into r2;
    output r2 as u32.private;
""", errors = "", warnings = "" },
    { initial_symbol_table = "42d242bf08b1ff58a2640d65713dcb4783a7b59c9fe35af1863b819c33e6b9f2", type_checked_symbol_table = "f28e9e26827f070928d22fcd6ab9e070dec65d97d4e6b3333959e75ca91a9953", unrolled_symbol_table = "f28e9e26827f070928d22fcd6ab9e070dec65d97d4e6b3333959e75ca91a9953", initial_ast = "959ef8008a2cb837e0f067c6954356034892bed1a8dcda72224f08e360a1c791", unrolled_ast = "f5a2e49f992ab80a104ceae85eb1c0a34c094ee9012a7ca9d5d6406f050515c4", ssa_ast = "a70cc7f42605c3f72904723c4c8237e3eada556f617588f9bde00e07d58c2cd2", flattened_ast = "02f4563ed934754a6db1939c5b3017356e63e4deaeafb66091c46500a534d8ab", destructured_ast = "56153136bc984183c654e6a4fcc8bd607c801b0a92a502d4c008360e6b816c54", inlined_ast = "573187f8b898181cc4f1c59ca1dc960b4767fa818591ccd3189eee82fc698155", dce_ast = "573187f8b898181cc4f1c59ca1dc960b4767fa818591ccd3189eee82fc698155", bytecode = """
import test.aleo;
program basic.aleo;

function main:
    input r0 as u32.public;
    input r1 as u32.private;
    call test.aleo/baz r0 r1 into r2;
    assert.eq r2 1u32;
    call test.aleo/main_inner 0u32 0u32 into r3;
    call test.aleo/baz r0 r1 into r4;
    assert.eq r4 1u32;
    call test.aleo/main_inner 1u32 1u32 into r5;
    call test.aleo/baz r0 r1 into r6;
    assert.eq r6 1u32;
    async main r3 r5 into r7;
    output r7 as basic.aleo/main.future;

finalize main:
    input r0 as test.aleo/main_inner.future;
    input r1 as test.aleo/main_inner.future;
    await r0;
    await r1;
""", errors = "", warnings = "" },
] }]]
