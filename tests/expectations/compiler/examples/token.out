namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_symbol_table = "e6630be283ece8f60bf19e68c600817b0ef278c19d7aef9fc3e5b31b00b060db", type_checked_symbol_table = "970ae60a9c72622950585cac77be9fa761471e17d2e5b4eb531790b342c6ff19", unrolled_symbol_table = "970ae60a9c72622950585cac77be9fa761471e17d2e5b4eb531790b342c6ff19", initial_ast = "b0916e5119f9754e055c2ca01281208939521e39bceebeb5a1e90f68d22aeffb", unrolled_ast = "b0916e5119f9754e055c2ca01281208939521e39bceebeb5a1e90f68d22aeffb", ssa_ast = "1546802d24cea35bc03a21e4796079a1e3e102e7b3afbc48fb6c0124b90083bf", flattened_ast = "1c4beac4af82905f22419f8ee99cc535cbdd88dfb63c418d645b0d487791e95f", destructured_ast = "e9bd9cb2760eebdc8187802df1d2e3f9ea4c8c8a709ac5eccc261412dbd3e168", inlined_ast = "c2e4f4eec7defbdeffc1a1e8be826907653f73e490a614fae5603fbe7c48e20d", dce_ast = "c2e4f4eec7defbdeffc1a1e8be826907653f73e490a614fae5603fbe7c48e20d", bytecode = """
program token.aleo;

record token:
    owner as address.private;
    amount as u64.private;

mapping account:
    key as address.public;
    value as u64.public;

function mint_public:
    input r0 as address.public;
    input r1 as u64.public;
    async mint_public r0 r1 into r2;
    output r2 as token.aleo/mint_public.future;

finalize mint_public:
    input r0 as address.public;
    input r1 as u64.public;
    get.or_use account[r0] 0u64 into r2;
    add r2 r1 into r3;
    set r3 into account[r0];

function mint_private:
    input r0 as address.private;
    input r1 as u64.private;
    cast r0 r1 into r2 as token.record;
    output r2 as token.record;

function transfer_public:
    input r0 as address.public;
    input r1 as u64.public;
    async transfer_public self.caller r0 r1 into r2;
    output r2 as token.aleo/transfer_public.future;

finalize transfer_public:
    input r0 as address.public;
    input r1 as address.public;
    input r2 as u64.public;
    get.or_use account[r0] 0u64 into r3;
    sub r3 r2 into r4;
    set r4 into account[r0];
    get.or_use account[r1] 0u64 into r5;
    add r5 r2 into r6;
    set r6 into account[r1];

function transfer_private:
    input r0 as token.record;
    input r1 as address.private;
    input r2 as u64.private;
    sub r0.amount r2 into r3;
    cast r0.owner r3 into r4 as token.record;
    cast r1 r2 into r5 as token.record;
    output r4 as token.record;
    output r5 as token.record;

function transfer_private_to_public:
    input r0 as token.record;
    input r1 as address.public;
    input r2 as u64.public;
    sub r0.amount r2 into r3;
    cast r0.owner r3 into r4 as token.record;
    async transfer_private_to_public r1 r2 into r5;
    output r4 as token.record;
    output r5 as token.aleo/transfer_private_to_public.future;

finalize transfer_private_to_public:
    input r0 as address.public;
    input r1 as u64.public;
    get.or_use account[r0] 0u64 into r2;
    add r2 r1 into r3;
    set r3 into account[r0];

function transfer_public_to_private:
    input r0 as address.public;
    input r1 as u64.public;
    cast r0 r1 into r2 as token.record;
    async transfer_public_to_private self.caller r1 into r3;
    output r2 as token.record;
    output r3 as token.aleo/transfer_public_to_private.future;

finalize transfer_public_to_private:
    input r0 as address.public;
    input r1 as u64.public;
    get.or_use account[r0] 0u64 into r2;
    sub r2 r1 into r3;
    set r3 into account[r0];
""", errors = "", warnings = "" }] }]]
